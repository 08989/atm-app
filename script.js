let currentUser = null;
let transactionType = "";
let currentLanguage = localStorage.getItem("language") || "en";

const translations = {
  en: {
    profile: "Profile",
    language: "Language",
    theme: "Theme",
    settings: "Settings",
    appTitle: "üè¶ GlobalBank ATM",
    loginInputPlaceholder: "Enter Email",
    passwordInputPlaceholder: "Enter 4-digit PIN",
    loginBtn: "Login",
    signUpBtn: "Sign Up",
    welcomeMessage: "Welcome!",
    checkBalanceBtn: "Check Balance",
    depositBtn: "Deposit",
    withdrawBtn: "Withdraw",
    signUpTitle: "Sign Up",
    signUpNamePlaceholder: "Full Name",
    signUpAccountPlaceholder: "Account Number (4 digits)",
    signUpPhonePlaceholder: "Phone Number (10 digits)",
    signUpEmailPlaceholder: "Email",
    signUpPasswordPlaceholder: "4-digit PIN",
    signUpSubmitBtn: "Submit",
    signUpCancelBtn: "Cancel",
    enterPinTitle: "Enter PIN",
    passwordSubmitBtn: "Submit",
    passwordCancelBtn: "Cancel",
    enterAmountTitle: "Enter Amount",
    amountSubmitBtn: "Submit",
    amountCancelBtn: "Cancel",
    balanceTitle: "Your Balance",
    balanceCloseBtn: "Close",
    profileTitle: "Profile",
    profileCloseBtn: "Close",
    selectLanguageTitle: "Select Language",
    langEnglishBtn: "English",
    langHindiBtn: "Hindi",
    langFrenchBtn: "Fran√ßais",
    langRussianBtn: "–†—É—Å—Å–∫–∏–π",
    langCancelBtn: "Cancel",
    soundLabel: "Sound",
    vibrationLabel: "Vibration",
    darkModeLabel: "Dark Mode",
    settingsCloseBtn: "Close",
    profileAccount: "Account",
    profilePhone: "Phone",
    profileEmail: "Email",
    userGreeting: "Hello!",
    transactionHistory: "Transaction History",
    noTransactions: "No transactions yet.",
    mainLogoutBtn: "Logout",
    signUpFillAllFields: "Please fill all fields.",
    signUpNameInvalid: "Name must be letters and spaces only.",
    signUpAccountInvalid: "Account must be a 4-digit number.",
    signUpPhoneInvalid: "Phone must be a 10-digit number.",
    signUpEmailInvalid: "Invalid email format.",
    signUpPasswordInvalid: "PIN must be a 4-digit number.",
    signUpAccountExists: "Account number already exists.",
    signUpPhoneExists: "Phone number already exists.",
    signUpEmailExists: "Email already exists.",
    signUpSuccess: "Sign-up successful! Please log in.",
    loginFillAllFields: "Please enter all fields.",
    loginPasswordInvalid: "PIN must be a 4-digit number.",
    loginInvalidFormat: "Invalid email format.",
    loginInvalidCredentials: "Invalid credentials.",
    logoutConfirm: "Are you sure you want to logout?",
    incorrectPin: "Incorrect PIN.",
    invalidAmount: "Enter a valid amount.",
    depositSuccess: "Deposit successful!",
    withdrawSuccess: "Withdrawal successful!",
    insufficientFunds: "Insufficient funds."
  },
  hi: {
    profile: "‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤",
    language: "‡§≠‡§æ‡§∑‡§æ",
    theme: "‡§•‡•Ä‡§Æ",
    settings: "‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏",
    appTitle: "üè¶ ‡§ó‡•ç‡§≤‡•ã‡§¨‡§≤ ‡§¨‡•à‡§Ç‡§ï ‡§è‡§ü‡•Ä‡§è‡§Æ",
    loginInputPlaceholder: "‡§à‡§Æ‡•á‡§≤ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç",
    passwordInputPlaceholder: "4-‡§Ö‡§Ç‡§ï‡•Ä‡§Ø ‡§™‡§ø‡§® ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç",
    loginBtn: "‡§≤‡•â‡§ó‡§ø‡§®",
    signUpBtn: "‡§∏‡§æ‡§á‡§® ‡§Ö‡§™",
    welcomeMessage: "‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à!",
    checkBalanceBtn: "‡§∂‡•á‡§∑ ‡§∞‡§æ‡§∂‡§ø ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
    depositBtn: "‡§ú‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç",
    withdrawBtn: "‡§®‡§ø‡§ï‡§æ‡§∏‡•Ä",
    signUpTitle: "‡§∏‡§æ‡§á‡§® ‡§Ö‡§™",
    signUpNamePlaceholder: "‡§™‡•Ç‡§∞‡§æ ‡§®‡§æ‡§Æ",
    signUpAccountPlaceholder: "‡§ñ‡§æ‡§§‡§æ ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ (4 ‡§Ö‡§Ç‡§ï)",
    signUpPhonePlaceholder: "‡§´‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ (10 ‡§Ö‡§Ç‡§ï)",
    signUpEmailPlaceholder: "‡§à‡§Æ‡•á‡§≤",
    signUpPasswordPlaceholder: "4-‡§Ö‡§Ç‡§ï‡•Ä‡§Ø ‡§™‡§ø‡§®",
    signUpSubmitBtn: "‡§ú‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç",
    signUpCancelBtn: "‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç",
    enterPinTitle: "‡§™‡§ø‡§® ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç",
    passwordSubmitBtn: "‡§ú‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç",
    passwordCancelBtn: "‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç",
    enterAmountTitle: "‡§∞‡§æ‡§∂‡§ø ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç",
    amountSubmitBtn: "‡§ú‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç",
    amountCancelBtn: "‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç",
    balanceTitle: "‡§Ü‡§™‡§ï‡•Ä ‡§∂‡•á‡§∑ ‡§∞‡§æ‡§∂‡§ø",
    balanceCloseBtn: "‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç",
    profileTitle: "‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤",
    profileCloseBtn: "‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç",
    selectLanguageTitle: "‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç",
    langEnglishBtn: "‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä",
    langHindiBtn: "‡§π‡§ø‡§Ç‡§¶‡•Ä",
    langFrenchBtn: "‡§´‡•ç‡§∞‡•á‡§Ç‡§ö",
    langRussianBtn: "‡§∞‡•Ç‡§∏‡•Ä",
    langCancelBtn: "‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç",
    soundLabel: "‡§ß‡•ç‡§µ‡§®‡§ø",
    vibrationLabel: "‡§ï‡§Ç‡§™‡§®",
    darkModeLabel: "‡§°‡§æ‡§∞‡•ç‡§ï ‡§Æ‡•ã‡§°",
    settingsCloseBtn: "‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç",
    profileAccount: "‡§ñ‡§æ‡§§‡§æ",
    profilePhone: "‡§´‡•ã‡§®",
    profileEmail: "‡§à‡§Æ‡•á‡§≤",
    userGreeting: "‡§®‡§Æ‡§∏‡•ç‡§§‡•á!",
    transactionHistory: "‡§≤‡•á‡§®‡§¶‡•á‡§® ‡§á‡§§‡§ø‡§π‡§æ‡§∏",
    noTransactions: "‡§Ö‡§≠‡•Ä ‡§§‡§ï ‡§ï‡•ã‡§à ‡§≤‡•á‡§®‡§¶‡•á‡§® ‡§®‡§π‡•Ä‡§Ç‡•§",
    mainLogoutBtn: "‡§≤‡•â‡§ó‡§Ü‡§â‡§ü",
    signUpFillAllFields: "‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§≠‡•Ä ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§≠‡§∞‡•á‡§Ç‡•§",
    signUpNameInvalid: "‡§®‡§æ‡§Æ ‡§Æ‡•á‡§Ç ‡§ï‡•á‡§µ‡§≤ ‡§Ö‡§ï‡•ç‡§∑‡§∞ ‡§î‡§∞ ‡§∞‡§ø‡§ï‡•ç‡§§ ‡§∏‡•ç‡§•‡§æ‡§® ‡§π‡•ã‡§®‡•á ‡§ö‡§æ‡§π‡§ø‡§è‡•§",
    signUpAccountInvalid: "‡§ñ‡§æ‡§§‡§æ 4 ‡§Ö‡§Ç‡§ï‡•ã‡§Ç ‡§ï‡§æ ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§",
    signUpPhoneInvalid: "‡§´‡•ã‡§® 10 ‡§Ö‡§Ç‡§ï‡•ã‡§Ç ‡§ï‡§æ ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§",
    signUpEmailInvalid: "‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§à‡§Æ‡•á‡§≤ ‡§™‡•ç‡§∞‡§æ‡§∞‡•Ç‡§™‡•§",
    signUpPasswordInvalid: "‡§™‡§ø‡§® 4 ‡§Ö‡§Ç‡§ï‡•ã‡§Ç ‡§ï‡§æ ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§",
    signUpAccountExists: "‡§ñ‡§æ‡§§‡§æ ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§π‡•à‡•§",
    signUpPhoneExists: "‡§´‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§π‡•à‡•§",
    signUpEmailExists: "‡§à‡§Æ‡•á‡§≤ ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§π‡•à‡•§",
    signUpSuccess: "‡§∏‡§æ‡§á‡§®-‡§Ö‡§™ ‡§∏‡§´‡§≤! ‡§ï‡•É‡§™‡§Ø‡§æ ‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡§∞‡•á‡§Ç‡•§",
    loginFillAllFields: "‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§≠‡•Ä ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§≠‡§∞‡•á‡§Ç‡•§",
    loginPasswordInvalid: "‡§™‡§ø‡§® 4 ‡§Ö‡§Ç‡§ï‡•ã‡§Ç ‡§ï‡§æ ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§",
    loginInvalidFormat: "‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§à‡§Æ‡•á‡§≤ ‡§™‡•ç‡§∞‡§æ‡§∞‡•Ç‡§™‡•§",
    loginInvalidCredentials: "‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ï‡•ç‡§∞‡•á‡§°‡•á‡§Ç‡§∂‡§ø‡§Ø‡§≤‡•ç‡§∏‡•§",
    logoutConfirm: "‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§≤‡•â‡§ó‡§Ü‡§â‡§ü ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?",
    incorrectPin: "‡§ó‡§≤‡§§ ‡§™‡§ø‡§®‡•§",
    invalidAmount: "‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§∞‡§æ‡§∂‡§ø ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç‡•§",
    depositSuccess: "‡§ú‡§Æ‡§æ ‡§∏‡§´‡§≤!",
    withdrawSuccess: "‡§®‡§ø‡§ï‡§æ‡§∏‡•Ä ‡§∏‡§´‡§≤!",
    insufficientFunds: "‡§Ö‡§™‡§∞‡•ç‡§Ø‡§æ‡§™‡•ç‡§§ ‡§ß‡§®‡§∞‡§æ‡§∂‡§ø‡•§"
  },
  fr: {
    profile: "Profil",
    language: "Langue",
    theme: "Th√®me",
    settings: "Param√®tres",
    appTitle: "üè¶ Distributeur GlobalBank",
    loginInputPlaceholder: "Entrez l'email",
    passwordInputPlaceholder: "Entrez le code PIN √† 4 chiffres",
    loginBtn: "Connexion",
    signUpBtn: "S'inscrire",
    welcomeMessage: "Bienvenue !",
    checkBalanceBtn: "V√©rifier le solde",
    depositBtn: "D√©poser",
    withdrawBtn: "Retirer",
    signUpTitle: "Inscription",
    signUpNamePlaceholder: "Nom complet",
    signUpAccountPlaceholder: "Num√©ro de compte (4 chiffres)",
    signUpPhonePlaceholder: "Num√©ro de t√©l√©phone (10 chiffres)",
    signUpEmailPlaceholder: "Email",
    signUpPasswordPlaceholder: "Code PIN √† 4 chiffres",
    signUpSubmitBtn: "Soumettre",
    signUpCancelBtn: "Annuler",
    enterPinTitle: "Entrez le code PIN",
    passwordSubmitBtn: "Soumettre",
    passwordCancelBtn: "Annuler",
    enterAmountTitle: "Entrez le montant",
    amountSubmitBtn: "Soumettre",
    amountCancelBtn: "Annuler",
    balanceTitle: "Votre solde",
    balanceCloseBtn: "Fermer",
    profileTitle: "Profil",
    profileCloseBtn: "Fermer",
    selectLanguageTitle: "S√©lectionner la langue",
    langEnglishBtn: "Anglais",
    langHindiBtn: "Hindi",
    langFrenchBtn: "Fran√ßais",
    langRussianBtn: "Russe",
    langCancelBtn: "Annuler",
    soundLabel: "Son",
    vibrationLabel: "Vibration",
    darkModeLabel: "Mode sombre",
    settingsCloseBtn: "Fermer",
    profileAccount: "Compte",
    profilePhone: "T√©l√©phone",
    profileEmail: "Email",
    userGreeting: "Bonjour !",
    transactionHistory: "Historique des transactions",
    noTransactions: "Aucune transaction pour le moment.",
    mainLogoutBtn: "D√©connexion",
    signUpFillAllFields: "Veuillez remplir tous les champs.",
    signUpNameInvalid: "Le nom doit contenir uniquement des lettres et des espaces.",
    signUpAccountInvalid: "Le compte doit √™tre un num√©ro √† 4 chiffres.",
    signUpPhoneInvalid: "Le t√©l√©phone doit √™tre un num√©ro √† 10 chiffres.",
    signUpEmailInvalid: "Format d'email invalide.",
    signUpPasswordInvalid: "Le PIN doit √™tre un nombre √† 4 chiffres.",
    signUpAccountExists: "Le num√©ro de compte existe d√©j√†.",
    signUpPhoneExists: "Le num√©ro de t√©l√©phone existe d√©j√†.",
    signUpEmailExists: "L'email existe d√©j√†.",
    signUpSuccess: "Inscription r√©ussie ! Veuillez vous connecter.",
    loginFillAllFields: "Veuillez remplir tous les champs.",
    loginPasswordInvalid: "Le PIN doit √™tre un nombre √† 4 chiffres.",
    loginInvalidFormat: "Format d'email invalide.",
    loginInvalidCredentials: "Identifiants invalides.",
    logoutConfirm: "Voulez-vous vraiment vous d√©connecter ?",
    incorrectPin: "PIN incorrect.",
    invalidAmount: "Entrez un montant valide.",
    depositSuccess: "D√©p√¥t r√©ussi !",
    withdrawSuccess: "Retrait r√©ussi !",
    insufficientFunds: "Fonds insuffisants."
  },
  ru: {
    profile: "–ü—Ä–æ—Ñ–∏–ª—å",
    language: "–Ø–∑—ã–∫",
    theme: "–¢–µ–º–∞",
    settings: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    appTitle: "üè¶ –ë–∞–Ω–∫–æ–º–∞—Ç GlobalBank",
    loginInputPlaceholder: "–í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É",
    passwordInputPlaceholder: "–í–≤–µ–¥–∏—Ç–µ 4-–∑–Ω–∞—á–Ω—ã–π PIN",
    loginBtn: "–í–æ–π—Ç–∏",
    signUpBtn: "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
    welcomeMessage: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
    checkBalanceBtn: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å",
    depositBtn: "–í–Ω–µ—Å—Ç–∏",
    withdrawBtn: "–°–Ω—è—Ç—å",
    signUpTitle: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
    signUpNamePlaceholder: "–ü–æ–ª–Ω–æ–µ –∏–º—è",
    signUpAccountPlaceholder: "–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ (4 —Ü–∏—Ñ—Ä—ã)",
    signUpPhonePlaceholder: "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (10 —Ü–∏—Ñ—Ä)",
    signUpEmailPlaceholder: "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞",
    signUpPasswordPlaceholder: "4-–∑–Ω–∞—á–Ω—ã–π PIN",
    signUpSubmitBtn: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å",
    signUpCancelBtn: "–û—Ç–º–µ–Ω–∞",
    enterPinTitle: "–í–≤–µ–¥–∏—Ç–µ PIN",
    passwordSubmitBtn: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å",
    passwordCancelBtn: "–û—Ç–º–µ–Ω–∞",
    enterAmountTitle: "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É",
    amountSubmitBtn: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å",
    amountCancelBtn: "–û—Ç–º–µ–Ω–∞",
    balanceTitle: "–í–∞—à –±–∞–ª–∞–Ω—Å",
    balanceCloseBtn: "–ó–∞–∫—Ä—ã—Ç—å",
    profileTitle: "–ü—Ä–æ—Ñ–∏–ª—å",
    profileCloseBtn: "–ó–∞–∫—Ä—ã—Ç—å",
    selectLanguageTitle: "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫",
    langEnglishBtn: "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
    langHindiBtn: "–•–∏–Ω–¥–∏",
    langFrenchBtn: "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π",
    langRussianBtn: "–†—É—Å—Å–∫–∏–π",
    langCancelBtn: "–û—Ç–º–µ–Ω–∞",
    soundLabel: "–ó–≤—É–∫",
    vibrationLabel: "–í–∏–±—Ä–∞—Ü–∏—è",
    darkModeLabel: "–¢–µ–º–Ω—ã–π —Ä–µ–∂–∏–º",
    settingsCloseBtn: "–ó–∞–∫—Ä—ã—Ç—å",
    profileAccount: "–°—á–µ—Ç",
    profilePhone: "–¢–µ–ª–µ—Ñ–æ–Ω",
    profileEmail: "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞",
    userGreeting: "–ü—Ä–∏–≤–µ—Ç!",
    transactionHistory: "–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
    noTransactions: "–ü–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.",
    mainLogoutBtn: "–í—ã–π—Ç–∏",
    signUpFillAllFields: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.",
    signUpNameInvalid: "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã.",
    signUpAccountInvalid: "–°—á–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 4-–∑–Ω–∞—á–Ω—ã–º —á–∏—Å–ª–æ–º.",
    signUpPhoneInvalid: "–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 10-–∑–Ω–∞—á–Ω—ã–º —á–∏—Å–ª–æ–º.",
    signUpEmailInvalid: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.",
    signUpPasswordInvalid: "PIN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 4-–∑–Ω–∞—á–Ω—ã–º —á–∏—Å–ª–æ–º.",
    signUpAccountExists: "–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
    signUpPhoneExists: "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
    signUpEmailExists: "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
    signUpSuccess: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ.",
    loginFillAllFields: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.",
    loginPasswordInvalid: "PIN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 4-–∑–Ω–∞—á–Ω—ã–º —á–∏—Å–ª–æ–º.",
    loginInvalidFormat: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.",
    loginInvalidCredentials: "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.",
    logoutConfirm: "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?",
    incorrectPin: "–ù–µ–≤–µ—Ä–Ω—ã–π PIN.",
    invalidAmount: "–í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É.",
    depositSuccess: "–í–Ω–µ—Å–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!",
    withdrawSuccess: "–°–Ω—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ!",
    insufficientFunds: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤."
  }
};

function formatCurrency(amount) {
  return `‚Çπ${Math.round(amount).toLocaleString("en-IN")}`;
}

function updateLanguage() {
  const elements = [
    { id: "profileLabel", text: translations[currentLanguage].profile },
    { id: "languageLabel", text: translations[currentLanguage].language },
    { id: "themeLabel", text: translations[currentLanguage].theme },
    { id: "settingsLabel", text: translations[currentLanguage].settings },
    { id: "appTitle", text: translations[currentLanguage].appTitle },
    { id: "loginBtn", text: translations[currentLanguage].loginBtn },
    { id: "signUpBtn", text: translations[currentLanguage].signUpBtn },
    { id: "welcomeMessage", text: translations[currentLanguage].welcomeMessage },
    { id: "checkBalanceBtn", text: translations[currentLanguage].checkBalanceBtn },
    { id: "depositBtn", text: translations[currentLanguage].depositBtn },
    { id: "withdrawBtn", text: translations[currentLanguage].withdrawBtn },
    { id: "signUpTitle", text: translations[currentLanguage].signUpTitle },
    { id: "signUpSubmitBtn", text: translations[currentLanguage].signUpSubmitBtn },
    { id: "signUpCancelBtn", text: translations[currentLanguage].signUpCancelBtn },
    { id: "enterPinTitle", text: translations[currentLanguage].enterPinTitle },
    { id: "passwordSubmitBtn", text: translations[currentLanguage].passwordSubmitBtn },
    { id: "passwordCancelBtn", text: translations[currentLanguage].passwordCancelBtn },
    { id: "enterAmountTitle", text: translations[currentLanguage].enterAmountTitle },
    { id: "amountSubmitBtn", text: translations[currentLanguage].amountSubmitBtn },
    { id: "amountCancelBtn", text: translations[currentLanguage].amountCancelBtn },
    { id: "balanceTitle", text: translations[currentLanguage].balanceTitle },
    { id: "balanceCloseBtn", text: translations[currentLanguage].balanceCloseBtn },
    { id: "profileTitle", text: translations[currentLanguage].profileTitle },
    { id: "profileCloseBtn", text: translations[currentLanguage].profileCloseBtn },
    { id: "selectLanguageTitle", text: translations[currentLanguage].selectLanguageTitle },
    { id: "langEnglishBtn", text: translations[currentLanguage].langEnglishBtn },
    { id: "langHindiBtn", text: translations[currentLanguage].langHindiBtn },
    { id: "langFrenchBtn", text: translations[currentLanguage].langFrenchBtn },
    { id: "langRussianBtn", text: translations[currentLanguage].langRussianBtn },
    { id: "langCancelBtn", text: translations[currentLanguage].langCancelBtn },
    { id: "soundLabel", text: translations[currentLanguage].soundLabel },
    { id: "vibrationLabel", text: translations[currentLanguage].vibrationLabel },
    { id: "darkModeLabel", text: translations[currentLanguage].darkModeLabel },
    { id: "mainLogoutBtn", text: translations[currentLanguage].mainLogoutBtn }
  ];

  elements.forEach(({ id, text }) => {
    const element = document.getElementById(id);
    if (element) element.textContent = text;
  });

  const placeholders = [
    { id: "loginInput", text: translations[currentLanguage].loginInputPlaceholder },
    { id: "passwordInput", text: translations[currentLanguage].passwordInputPlaceholder },
    { id: "signUpName", text: translations[currentLanguage].signUpNamePlaceholder },
    { id: "signUpAccount", text: translations[currentLanguage].signUpAccountPlaceholder },
    { id: "signUpPhone", text: translations[currentLanguage].signUpPhonePlaceholder },
    { id: "signUpEmail", text: translations[currentLanguage].signUpEmailPlaceholder },
    { id: "signUpPassword", text: translations[currentLanguage].signUpPasswordPlaceholder }
  ];

  placeholders.forEach(({ id, text }) => {
    const element = document.getElementById(id);
    if (element) element.placeholder = text;
  });

  const settingsCloseBtn = document.getElementById("settingsPanel")?.querySelector("button");
  if (settingsCloseBtn) settingsCloseBtn.textContent = translations[currentLanguage].settingsCloseBtn;

  updateSidebarGreeting();
  if (currentUser) profile();
}

function updateSidebarGreeting() {
  const greetingElement = document.getElementById("sidebarUserGreeting");
  if (greetingElement) greetingElement.textContent = translations[currentLanguage].userGreeting;
}

function setActiveMenu(element) {
  const menuItems = document.querySelectorAll(".sidebar-list li");
  menuItems.forEach(item => item.classList.remove("active"));
  element.classList.add("active");
}

function loadCustomers() {
  const saved = localStorage.getItem("customers");
  if (saved) {
    customers = JSON.parse(saved);
    customers.forEach(customer => {
      if (!customer.transactions) {
        customer.transactions = [];
      }
    });
  }
}

function saveCustomers() {
  localStorage.setItem("customers", JSON.stringify(customers));
}

function changeLanguage(lang) {
  currentLanguage = lang;
  localStorage.setItem("language", lang);
  document.body.classList.remove("lang-en", "lang-hi", "lang-fr", "lang-ru");
  document.body.classList.add(`lang-${lang}`);
  updateLanguage();
  closeModal("languageModal");
}

function openSignUpModal() {
  const signUpName = document.getElementById("signUpName");
  const signUpAccount = document.getElementById("signUpAccount");
  const signUpPhone = document.getElementById("signUpPhone");
  const signUpEmail = document.getElementById("signUpEmail");
  const signUpPassword = document.getElementById("signUpPassword");
  const signUpMessage = document.getElementById("signUpMessage");
  if (signUpName) signUpName.value = "";
  if (signUpAccount) signUpAccount.value = "";
  if (signUpPhone) signUpPhone.value = "";
  if (signUpEmail) signUpEmail.value = "";
  if (signUpPassword) signUpPassword.value = "";
  if (signUpMessage) signUpMessage.textContent = "";
  const signUpModal = document.getElementById("signUpModal");
  const modalBackdrop = document.getElementById("modalBackdrop");
  if (signUpModal) signUpModal.classList.add("show");
  if (modalBackdrop) modalBackdrop.classList.add("show");
}

function signUp() {
  const name = document.getElementById("signUpName")?.value.trim();
  const account = document.getElementById("signUpAccount")?.value.trim();
  const phone = document.getElementById("signUpPhone")?.value.trim();
  const email = document.getElementById("signUpEmail")?.value.trim();
  const password = document.getElementById("signUpPassword")?.value.trim();
  const message = document.getElementById("signUpMessage");

  if (!name || !account || !phone || !email || !password) {
    if (message) message.textContent = translations[currentLanguage].signUpFillAllFields;
    return;
  }
  if (!name.match(/^[A-Za-z\s]{2,}$/)) {
    if (message) message.textContent = translations[currentLanguage].signUpNameInvalid;
    return;
  }
  if (!account.match(/^\d{4}$/)) {
    if (message) message.textContent = translations[currentLanguage].signUpAccountInvalid;
    return;
  }
  if (!phone.match(/^\d{10}$/)) {
    if (message) message.textContent = translations[currentLanguage].signUpPhoneInvalid;
    return;
  }
  if (!email.match(/^[^\s@]+@[^\s@]+\.[^\s@]+$/)) {
    if (message) message.textContent = translations[currentLanguage].signUpEmailInvalid;
    return;
  }
  if (!password.match(/^\d{4}$/)) {
    if (message) message.textContent = translations[currentLanguage].signUpPasswordInvalid;
    return;
  }

  // Send to PHP
  fetch("signup.php", {
    method: "POST",
    headers: {
      "Content-Type": "application/x-www-form-urlencoded"
    },
    body: `name=${encodeURIComponent(name)}&account=${encodeURIComponent(account)}&phone=${encodeURIComponent(phone)}&email=${encodeURIComponent(email)}&password=${encodeURIComponent(password)}`
  })
    .then(res => res.text())
    .then(response => {
      const trimmed = response.trim();
      if (trimmed === "‚úÖ success" || trimmed === "success") {
        closeModal("signUpModal");
        alert(translations[currentLanguage].signUpSuccess);
      } else {
        if (message) message.textContent = trimmed;
      }
    })
    .catch(error => {
      console.error("Sign-up error:", error);
      if (message) message.textContent = "Server error. Try again.";
    });
}

function login() {
  const email = document.getElementById("loginInput")?.value.trim();
  const password = document.getElementById("passwordInput")?.value.trim();
  const message = document.getElementById("loginMessage");

  if (!email || !password) {
    message.textContent = "Please enter all fields.";
    return;
  }

  // Send data to PHP
  fetch("login.php", {
    method: "POST",
    headers: {
      "Content-Type": "application/x-www-form-urlencoded"
    },
    body: `email=${encodeURIComponent(email)}&password=${encodeURIComponent(password)}`
  })
  .then(response => response.text())
  .then(data => {
    if (data.trim() === "success") {
      document.getElementById("loginSection").style.display = "none";
      document.getElementById("atmSection").style.display = "block";
      document.getElementById("sidebarToggle").style.display = "block";
      document.body.classList.add("logged-in");
    } else {
      message.textContent = data;
    }
  })
  .catch(error => {
    console.error("Login error:", error);
    message.textContent = "Server error. Try again.";
  });
}


function logout() {
  if (!confirm(translations[currentLanguage].logoutConfirm)) return;
  
  currentUser = null;
  const loginSection = document.getElementById("loginSection");
  const atmSection = document.getElementById("atmSection");
  const sidebar = document.getElementById("sidebar");
  const mainContent = document.getElementById("mainContent");
  const sidebarToggle = document.getElementById("sidebarToggle");
  const loginInput = document.getElementById("loginInput");
  const passwordInput = document.getElementById("passwordInput");
  const loginMessage = document.getElementById("loginMessage");
  const modalBackdrop = document.getElementById("modalBackdrop");
  const settingsPanel = document.getElementById("settingsPanel");

  if (loginSection) loginSection.style.display = "block";
  if (atmSection) atmSection.style.display = "none";
  if (sidebar) sidebar.classList.remove("show");
  if (mainContent) mainContent.classList.remove("dimmed");
  if (sidebarToggle) sidebarToggle.style.display = "none";
  if (loginInput) loginInput.value = "";
  if (passwordInput) passwordInput.value = "";
  if (loginMessage) loginMessage.textContent = "";
  if (modalBackdrop) modalBackdrop.classList.remove("show");
  if (settingsPanel) settingsPanel.style.display = "none";

  const modals = ["signUpModal", "passwordModal", "amountModal", "balanceModal", "profileModal", "languageModal"];
  modals.forEach(modalId => {
    const modal = document.getElementById(modalId);
    if (modal) modal.classList.remove("show");
  });

  document.body.classList.remove("logged-in");
  updateLanguage();
  const menuItems = document.querySelectorAll(".sidebar-list li");
  menuItems.forEach(item => item.classList.remove("active"));
}

function showPasswordModal(type) {
  transactionType = type;
  const passwordEntry = document.getElementById("passwordEntry");
  const passwordModal = document.getElementById("passwordModal");
  const modalBackdrop = document.getElementById("modalBackdrop");
  if (passwordEntry) passwordEntry.value = "";
  if (passwordModal) passwordModal.classList.add("show");
  if (modalBackdrop) modalBackdrop.classList.add("show");
}

function validatePassword() {
  const pass = document.getElementById("passwordEntry")?.value;
  if (pass === currentUser.password) {
    closeModal("passwordModal");
    if (transactionType === "balance") {
      const balanceDisplay = document.getElementById("balanceDisplay");
      const balanceModal = document.getElementById("balanceModal");
      const modalBackdrop = document.getElementById("modalBackdrop");
      if (balanceDisplay) balanceDisplay.textContent = formatCurrency(currentUser.balance);
      if (balanceModal) balanceModal.classList.add("show");
      if (modalBackdrop) modalBackdrop.classList.add("show");
    } else {
      const amountEntry = document.getElementById("amountEntry");
      const amountModal = document.getElementById("amountModal");
      const modalBackdrop = document.getElementById("modalBackdrop");
      if (amountEntry) amountEntry.value = "";
      if (amountModal) amountModal.classList.add("show");
      if (modalBackdrop) modalBackdrop.classList.add("show");
    }
  } else {
    alert(translations[currentLanguage].incorrectPin);
  }
}

function processTransaction() {
  const amount = parseFloat(document.getElementById("amountEntry")?.value);
  if (isNaN(amount) || amount <= 0) {
    alert(translations[currentLanguage].invalidAmount);
    return;
  }
  if (transactionType === "deposit") {
    currentUser.balance += amount;
    if (!currentUser.transactions) currentUser.transactions = [];
    currentUser.transactions.push({
      type: "Deposit",
      amount: amount,
      date: new Date().toLocaleString()
    });
    saveCustomers();
    closeModal("amountModal");
    alert(translations[currentLanguage].depositSuccess);
  } else if (transactionType === "withdraw") {
    if (currentUser.balance >= amount) {
      currentUser.balance -= amount;
      if (!currentUser.transactions) currentUser.transactions = [];
      currentUser.transactions.push({
        type: "Withdrawal",
        amount: -amount,
        date: new Date().toLocaleString()
      });
      saveCustomers();
      closeModal("amountModal");
      alert(translations[currentLanguage].withdrawSuccess);
    } else {
      alert(translations[currentLanguage].insufficientFunds);
    }
  }
}

function profile() {
  const profileDisplay = document.getElementById("profileDisplay");
  const profileModal = document.getElementById("profileModal");
  const modalBackdrop = document.getElementById("modalBackdrop");
  if (profileDisplay) {
    const transactions = Array.isArray(currentUser.transactions) ? currentUser.transactions.slice(-5).reverse() : [];
    const transactionList = transactions.length
      ? transactions.map(tx => `<li>${tx.type}: ${formatCurrency(Math.abs(tx.amount))} on ${tx.date}</li>`).join('')
      : `<li>${translations[currentLanguage].noTransactions}</li>`;
    profileDisplay.innerHTML = `
      <p><span class="icon">üßë</span><strong>Name:</strong><span>${currentUser.name}</span></p>
      <p><span class="icon">üè¶</span><strong>${translations[currentLanguage].profileAccount}:</strong><span>${currentUser.account}</span></p>
      <p><span class="icon">üìû</span><strong>${translations[currentLanguage].profilePhone}:</strong><span>${currentUser.phone}</span></p>
      <p><span class="icon">‚úâÔ∏è</span><strong>${translations[currentLanguage].profileEmail}:</strong><span>${currentUser.email}</span></p>
      <div class="transaction-history">
        <h4>${translations[currentLanguage].transactionHistory}</h4>
        <ul>${transactionList}</ul>
      </div>
    `;
  }
  if (profileModal) profileModal.classList.add("show");
  if (modalBackdrop) modalBackdrop.classList.add("show");
  toggleSidebar();
}

function toggleLanguage() {
  const languageModal = document.getElementById("languageModal");
  const modalBackdrop = document.getElementById("modalBackdrop");
  if (languageModal) languageModal.classList.add("show");
  if (modalBackdrop) modalBackdrop.classList.add("show");
  toggleSidebar();
}

function openSettings() {
  const settingsPanel = document.getElementById("settingsPanel");
  if (settingsPanel) settingsPanel.style.display = "block";
  toggleSidebar();
}

function closeSettings() {
  const settingsPanel = document.getElementById("settingsPanel");
  if (settingsPanel) settingsPanel.style.display = "none";
}

function toggleTheme() {
  toggleDarkMode();
  toggleSidebar();
}

function closeModal(id) {
  const modal = document.getElementById(id);
  const modalBackdrop = document.getElementById("modalBackdrop");
  if (modal) modal.classList.remove("show");
  if (modalBackdrop) modalBackdrop.classList.remove("show");
}

function toggleSidebar() {
  const sidebar = document.getElementById("sidebar");
  const mainContent = document.getElementById("mainContent");
  if (sidebar && mainContent) {
    sidebar.classList.toggle("show");
    mainContent.classList.toggle("dimmed");
    if (!sidebar.classList.contains("show")) {
      const menuItems = document.querySelectorAll(".sidebar-list li");
      menuItems.forEach(item => item.classList.remove("active"));
    }
  }
}

function toggleDarkMode() {
  document.body.classList.toggle("dark-mode");
  localStorage.setItem("dark", document.body.classList.contains("dark-mode"));
  const darkModeToggle = document.getElementById("darkModeToggle");
  if (darkModeToggle) darkModeToggle.checked = document.body.classList.contains("dark-mode");
}

function saveSetting(type) {
  const toggle = document.getElementById(type + "Toggle");
  if (toggle) {
    const val = toggle.checked;
    localStorage.setItem(type, val);
  }
}

window.onload = function() {
  setTimeout(() => {
    const splashScreen = document.getElementById("splashScreen");
    if (splashScreen) splashScreen.classList.add("hidden");
  }, 2000);

  loadCustomers();
  if (localStorage.getItem("dark") === "true") document.body.classList.add("dark-mode");
  const soundToggle = document.getElementById("soundToggle");
  const vibrationToggle = document.getElementById("vibrationToggle");
  const darkModeToggle = document.getElementById("darkModeToggle");
  if (soundToggle) soundToggle.checked = localStorage.getItem("sound") === "true";
  if (vibrationToggle) vibrationToggle.checked = localStorage.getItem("vibration") === "true";
  if (darkModeToggle) darkModeToggle.checked = localStorage.getItem("dark") === "true";
  document.body.classList.add(`lang-${currentLanguage}`);
  updateLanguage();

  const loginInput = document.getElementById("loginInput");
  const passwordInput = document.getElementById("passwordInput");
  if (loginInput) {
    loginInput.addEventListener("input", () => {
      const loginMessage = document.getElementById("loginMessage");
      if (loginMessage) loginMessage.textContent = "";
    });
  }
  if (passwordInput) {
    passwordInput.addEventListener("input", () => {
      const loginMessage = document.getElementById("loginMessage");
      if (loginMessage) loginMessage.textContent = "";
    });
  }

  const sidebar = document.getElementById("sidebar");
  if (sidebar) {
    sidebar.addEventListener("mouseleave", () => {
      if (window.innerWidth > 768 && sidebar.classList.contains("show")) {
        toggleSidebar();
      }
    });
  }
};